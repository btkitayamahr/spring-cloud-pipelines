node {
	stage('Build and Upload') {
		deleteDir()
		sh 'git config --global http.sslVerify false'
		
		// git clone
		checkout([
			$class: 'GitSCM',
			branches: [
				[name: "*/${env.GIT_BRANCH_NAME ?: 'master'}"]
			],
			doGenerateSubmoduleConfigurations: false,
			extensions: [],
			submoduleCfg: [],
			userRemoteConfigs: [
				[
					credentialsId: env.GIT_CREDENTIAL_ID,
					url: env.GIT_REPOSITORY
				]
			]
		])

		// Build app and create docker image
		dir("${WORKSPACE}/" + env.APP_NAME) {
			withMaven( maven: "Maven") {
				sh 'mvn clean install'
			}
		}
	}

	stage('Deploy to test') {
		// Stop docker container
		sshPublisher(
			publishers: [
				sshPublisherDesc(
					configName: env.SSH_CONFIG_NAME_TEST,
					transfers: [
						sshTransfer(
							excludes: '',
							execCommand: env.DEPLOY_COMMAND_01,
							execTimeout: 120000,
							flatten: false,
							makeEmptyDirs: false,
							noDefaultExcludes: false,
							patternSeparator: '[, ]+',
							remoteDirectory: '',
							remoteDirectorySDF: false,
							removePrefix: '',
							sourceFiles: ''
						)
					],
					usePromotionTimestamp: false,
					useWorkspaceInPromotion: false,
					verbose: false
				)
			]
		)
		sshPublisher(
			publishers: [
				sshPublisherDesc(
					configName: env.SSH_CONFIG_NAME_TEST,
					transfers: [
						sshTransfer(
							excludes: '',
							execCommand: env.DEPLOY_COMMAND_02,
							execTimeout: 120000,
							flatten: false,
							makeEmptyDirs: false,
							noDefaultExcludes: false,
							patternSeparator: '[, ]+',
							remoteDirectory: '',
							remoteDirectorySDF: false,
							removePrefix: '',
							sourceFiles: ''
						)
					],
					usePromotionTimestamp: false,
					useWorkspaceInPromotion: false,
					verbose: false
				)
			]
		)
		sshPublisher(
			publishers: [
				sshPublisherDesc(
					configName: env.SSH_CONFIG_NAME_TEST,
					transfers: [
						sshTransfer(
							excludes: '',
							execCommand: env.DEPLOY_COMMAND_03,
							execTimeout: 120000,
							flatten: false,
							makeEmptyDirs: false,
							noDefaultExcludes: false,
							patternSeparator: '[, ]+',
							remoteDirectory: '',
							remoteDirectorySDF: false,
							removePrefix: '',
							sourceFiles: ''
						)
					],
					usePromotionTimestamp: false,
					useWorkspaceInPromotion: false,
					verbose: false
				)
			]
		)
		sshPublisher(
			publishers: [
				sshPublisherDesc(
					configName: env.SSH_CONFIG_NAME_TEST,
					transfers: [
						sshTransfer(
							excludes: '',
							execCommand: env.DEPLOY_COMMAND_04,
							execTimeout: 120000,
							flatten: false,
							makeEmptyDirs: false,
							noDefaultExcludes: false,
							patternSeparator: '[, ]+',
							remoteDirectory: '',
							remoteDirectorySDF: false,
							removePrefix: '',
							sourceFiles: ''
						)
					],
					usePromotionTimestamp: false,
					useWorkspaceInPromotion: false,
					verbose: false
				)
			]
		)
	}
}